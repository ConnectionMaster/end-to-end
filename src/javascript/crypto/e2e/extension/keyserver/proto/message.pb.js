// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: js/message.proto

/**
 * @fileoverview Generated Protocol Buffer code for file js/message.proto.
 */

goog.provide('proto2.Profile');
goog.provide('proto2.Profile.PublicKey');
goog.provide('proto2.SignedProfileOperation');
goog.provide('proto2.SignedProfileOperation.ProfileOperationT');
goog.provide('proto2.SignedServerMessage');
goog.provide('proto2.SignedServerMessage.ServerMessage');
goog.provide('proto2.SignedServerMessage.ServerMessage.OperationsT');
goog.provide('proto2.ClientReply');
goog.provide('proto2.ClientReply.Status');
goog.provide('proto2.ClientReply.MerklemapNode');

goog.require('goog.proto2.Message');



/**
 * Message Profile.
 * @constructor
 * @extends {goog.proto2.Message}
 */
proto2.Profile = function() {
  goog.proto2.Message.apply(this);
};
goog.inherits(proto2.Profile, goog.proto2.Message);


/**
 * Overrides {@link goog.proto2.Message#clone} to specify its exact return type.
 * @return {!proto2.Profile} The cloned message.
 * @override
 */
proto2.Profile.prototype.clone;


/**
 * Gets the value of the SignatureKey field.
 * @return {proto2.Profile.PublicKey} The value.
 */
proto2.Profile.prototype.getSignatureKey = function() {
  return /** @type {proto2.Profile.PublicKey} */ (this.get$Value(1));
};


/**
 * Gets the value of the SignatureKey field or the default value if not set.
 * @return {!proto2.Profile.PublicKey} The value.
 */
proto2.Profile.prototype.getSignatureKeyOrDefault = function() {
  return /** @type {!proto2.Profile.PublicKey} */ (this.get$ValueOrDefault(1));
};


/**
 * Sets the value of the SignatureKey field.
 * @param {!proto2.Profile.PublicKey} value The value.
 */
proto2.Profile.prototype.setSignatureKey = function(value) {
  this.set$Value(1, value);
};


/**
 * @return {boolean} Whether the SignatureKey field has a value.
 */
proto2.Profile.prototype.hasSignatureKey = function() {
  return this.has$Value(1);
};


/**
 * @return {number} The number of values in the SignatureKey field.
 */
proto2.Profile.prototype.signatureKeyCount = function() {
  return this.count$Values(1);
};


/**
 * Clears the values in the SignatureKey field.
 */
proto2.Profile.prototype.clearSignatureKey = function() {
  this.clear$Field(1);
};


/**
 * Gets the value of the ExpirationTime field.
 * @return {?string} The value.
 */
proto2.Profile.prototype.getExpirationTime = function() {
  return /** @type {?string} */ (this.get$Value(2));
};


/**
 * Gets the value of the ExpirationTime field or the default value if not set.
 * @return {string} The value.
 */
proto2.Profile.prototype.getExpirationTimeOrDefault = function() {
  return /** @type {string} */ (this.get$ValueOrDefault(2));
};


/**
 * Sets the value of the ExpirationTime field.
 * @param {string} value The value.
 */
proto2.Profile.prototype.setExpirationTime = function(value) {
  this.set$Value(2, value);
};


/**
 * @return {boolean} Whether the ExpirationTime field has a value.
 */
proto2.Profile.prototype.hasExpirationTime = function() {
  return this.has$Value(2);
};


/**
 * @return {number} The number of values in the ExpirationTime field.
 */
proto2.Profile.prototype.expirationTimeCount = function() {
  return this.count$Values(2);
};


/**
 * Clears the values in the ExpirationTime field.
 */
proto2.Profile.prototype.clearExpirationTime = function() {
  this.clear$Field(2);
};


/**
 * Gets the value of the Version field.
 * @return {?string} The value.
 */
proto2.Profile.prototype.getVersion = function() {
  return /** @type {?string} */ (this.get$Value(3));
};


/**
 * Gets the value of the Version field or the default value if not set.
 * @return {string} The value.
 */
proto2.Profile.prototype.getVersionOrDefault = function() {
  return /** @type {string} */ (this.get$ValueOrDefault(3));
};


/**
 * Sets the value of the Version field.
 * @param {string} value The value.
 */
proto2.Profile.prototype.setVersion = function(value) {
  this.set$Value(3, value);
};


/**
 * @return {boolean} Whether the Version field has a value.
 */
proto2.Profile.prototype.hasVersion = function() {
  return this.has$Value(3);
};


/**
 * @return {number} The number of values in the Version field.
 */
proto2.Profile.prototype.versionCount = function() {
  return this.count$Values(3);
};


/**
 * Clears the values in the Version field.
 */
proto2.Profile.prototype.clearVersion = function() {
  this.clear$Field(3);
};

/**
 * Message PublicKey.
 * @constructor
 * @extends {goog.proto2.Message}
 */
proto2.Profile.PublicKey = function() {
  goog.proto2.Message.apply(this);
};
goog.inherits(proto2.Profile.PublicKey, goog.proto2.Message);


/**
 * Overrides {@link goog.proto2.Message#clone} to specify its exact return type.
 * @return {!proto2.Profile.PublicKey} The cloned message.
 * @override
 */
proto2.Profile.PublicKey.prototype.clone;


/**
 * Gets the value of the ed25519 field.
 * @return {?string} The value.
 */
proto2.Profile.PublicKey.prototype.getEd25519 = function() {
  return /** @type {?string} */ (this.get$Value(1));
};


/**
 * Gets the value of the ed25519 field or the default value if not set.
 * @return {string} The value.
 */
proto2.Profile.PublicKey.prototype.getEd25519OrDefault = function() {
  return /** @type {string} */ (this.get$ValueOrDefault(1));
};


/**
 * Sets the value of the ed25519 field.
 * @param {string} value The value.
 */
proto2.Profile.PublicKey.prototype.setEd25519 = function(value) {
  this.set$Value(1, value);
};


/**
 * @return {boolean} Whether the ed25519 field has a value.
 */
proto2.Profile.PublicKey.prototype.hasEd25519 = function() {
  return this.has$Value(1);
};


/**
 * @return {number} The number of values in the ed25519 field.
 */
proto2.Profile.PublicKey.prototype.ed25519Count = function() {
  return this.count$Values(1);
};


/**
 * Clears the values in the ed25519 field.
 */
proto2.Profile.PublicKey.prototype.clearEd25519 = function() {
  this.clear$Field(1);
};



/**
 * Message SignedProfileOperation.
 * @constructor
 * @extends {goog.proto2.Message}
 */
proto2.SignedProfileOperation = function() {
  goog.proto2.Message.apply(this);
};
goog.inherits(proto2.SignedProfileOperation, goog.proto2.Message);


/**
 * Overrides {@link goog.proto2.Message#clone} to specify its exact return type.
 * @return {!proto2.SignedProfileOperation} The cloned message.
 * @override
 */
proto2.SignedProfileOperation.prototype.clone;


/**
 * Gets the value of the ProfileOperation field.
 * @return {?string} The value.
 */
proto2.SignedProfileOperation.prototype.getProfileOperation = function() {
  return /** @type {?string} */ (this.get$Value(1));
};


/**
 * Gets the value of the ProfileOperation field or the default value if not set.
 * @return {string} The value.
 */
proto2.SignedProfileOperation.prototype.getProfileOperationOrDefault = function() {
  return /** @type {string} */ (this.get$ValueOrDefault(1));
};


/**
 * Sets the value of the ProfileOperation field.
 * @param {string} value The value.
 */
proto2.SignedProfileOperation.prototype.setProfileOperation = function(value) {
  this.set$Value(1, value);
};


/**
 * @return {boolean} Whether the ProfileOperation field has a value.
 */
proto2.SignedProfileOperation.prototype.hasProfileOperation = function() {
  return this.has$Value(1);
};


/**
 * @return {number} The number of values in the ProfileOperation field.
 */
proto2.SignedProfileOperation.prototype.profileOperationCount = function() {
  return this.count$Values(1);
};


/**
 * Clears the values in the ProfileOperation field.
 */
proto2.SignedProfileOperation.prototype.clearProfileOperation = function() {
  this.clear$Field(1);
};


/**
 * Gets the value of the NewProfileSignature field.
 * @return {?string} The value.
 */
proto2.SignedProfileOperation.prototype.getNewProfileSignature = function() {
  return /** @type {?string} */ (this.get$Value(2));
};


/**
 * Gets the value of the NewProfileSignature field or the default value if not set.
 * @return {string} The value.
 */
proto2.SignedProfileOperation.prototype.getNewProfileSignatureOrDefault = function() {
  return /** @type {string} */ (this.get$ValueOrDefault(2));
};


/**
 * Sets the value of the NewProfileSignature field.
 * @param {string} value The value.
 */
proto2.SignedProfileOperation.prototype.setNewProfileSignature = function(value) {
  this.set$Value(2, value);
};


/**
 * @return {boolean} Whether the NewProfileSignature field has a value.
 */
proto2.SignedProfileOperation.prototype.hasNewProfileSignature = function() {
  return this.has$Value(2);
};


/**
 * @return {number} The number of values in the NewProfileSignature field.
 */
proto2.SignedProfileOperation.prototype.newProfileSignatureCount = function() {
  return this.count$Values(2);
};


/**
 * Clears the values in the NewProfileSignature field.
 */
proto2.SignedProfileOperation.prototype.clearNewProfileSignature = function() {
  this.clear$Field(2);
};


/**
 * Gets the value of the OldProfileSignature field.
 * @return {?string} The value.
 */
proto2.SignedProfileOperation.prototype.getOldProfileSignature = function() {
  return /** @type {?string} */ (this.get$Value(3));
};


/**
 * Gets the value of the OldProfileSignature field or the default value if not set.
 * @return {string} The value.
 */
proto2.SignedProfileOperation.prototype.getOldProfileSignatureOrDefault = function() {
  return /** @type {string} */ (this.get$ValueOrDefault(3));
};


/**
 * Sets the value of the OldProfileSignature field.
 * @param {string} value The value.
 */
proto2.SignedProfileOperation.prototype.setOldProfileSignature = function(value) {
  this.set$Value(3, value);
};


/**
 * @return {boolean} Whether the OldProfileSignature field has a value.
 */
proto2.SignedProfileOperation.prototype.hasOldProfileSignature = function() {
  return this.has$Value(3);
};


/**
 * @return {number} The number of values in the OldProfileSignature field.
 */
proto2.SignedProfileOperation.prototype.oldProfileSignatureCount = function() {
  return this.count$Values(3);
};


/**
 * Clears the values in the OldProfileSignature field.
 */
proto2.SignedProfileOperation.prototype.clearOldProfileSignature = function() {
  this.clear$Field(3);
};

/**
 * Message ProfileOperationT.
 * @constructor
 * @extends {goog.proto2.Message}
 */
proto2.SignedProfileOperation.ProfileOperationT = function() {
  goog.proto2.Message.apply(this);
};
goog.inherits(proto2.SignedProfileOperation.ProfileOperationT, goog.proto2.Message);


/**
 * Overrides {@link goog.proto2.Message#clone} to specify its exact return type.
 * @return {!proto2.SignedProfileOperation.ProfileOperationT} The cloned message.
 * @override
 */
proto2.SignedProfileOperation.ProfileOperationT.prototype.clone;


/**
 * Gets the value of the Name field.
 * @return {?string} The value.
 */
proto2.SignedProfileOperation.ProfileOperationT.prototype.getName = function() {
  return /** @type {?string} */ (this.get$Value(1));
};


/**
 * Gets the value of the Name field or the default value if not set.
 * @return {string} The value.
 */
proto2.SignedProfileOperation.ProfileOperationT.prototype.getNameOrDefault = function() {
  return /** @type {string} */ (this.get$ValueOrDefault(1));
};


/**
 * Sets the value of the Name field.
 * @param {string} value The value.
 */
proto2.SignedProfileOperation.ProfileOperationT.prototype.setName = function(value) {
  this.set$Value(1, value);
};


/**
 * @return {boolean} Whether the Name field has a value.
 */
proto2.SignedProfileOperation.ProfileOperationT.prototype.hasName = function() {
  return this.has$Value(1);
};


/**
 * @return {number} The number of values in the Name field.
 */
proto2.SignedProfileOperation.ProfileOperationT.prototype.nameCount = function() {
  return this.count$Values(1);
};


/**
 * Clears the values in the Name field.
 */
proto2.SignedProfileOperation.ProfileOperationT.prototype.clearName = function() {
  this.clear$Field(1);
};


/**
 * Gets the value of the NewProfile field.
 * @return {?string} The value.
 */
proto2.SignedProfileOperation.ProfileOperationT.prototype.getNewProfile = function() {
  return /** @type {?string} */ (this.get$Value(2));
};


/**
 * Gets the value of the NewProfile field or the default value if not set.
 * @return {string} The value.
 */
proto2.SignedProfileOperation.ProfileOperationT.prototype.getNewProfileOrDefault = function() {
  return /** @type {string} */ (this.get$ValueOrDefault(2));
};


/**
 * Sets the value of the NewProfile field.
 * @param {string} value The value.
 */
proto2.SignedProfileOperation.ProfileOperationT.prototype.setNewProfile = function(value) {
  this.set$Value(2, value);
};


/**
 * @return {boolean} Whether the NewProfile field has a value.
 */
proto2.SignedProfileOperation.ProfileOperationT.prototype.hasNewProfile = function() {
  return this.has$Value(2);
};


/**
 * @return {number} The number of values in the NewProfile field.
 */
proto2.SignedProfileOperation.ProfileOperationT.prototype.newProfileCount = function() {
  return this.count$Values(2);
};


/**
 * Clears the values in the NewProfile field.
 */
proto2.SignedProfileOperation.ProfileOperationT.prototype.clearNewProfile = function() {
  this.clear$Field(2);
};



/**
 * Message SignedServerMessage.
 * @constructor
 * @extends {goog.proto2.Message}
 */
proto2.SignedServerMessage = function() {
  goog.proto2.Message.apply(this);
};
goog.inherits(proto2.SignedServerMessage, goog.proto2.Message);


/**
 * Overrides {@link goog.proto2.Message#clone} to specify its exact return type.
 * @return {!proto2.SignedServerMessage} The cloned message.
 * @override
 */
proto2.SignedServerMessage.prototype.clone;


/**
 * Gets the value of the Message field.
 * @return {?string} The value.
 */
proto2.SignedServerMessage.prototype.getMessage = function() {
  return /** @type {?string} */ (this.get$Value(1));
};


/**
 * Gets the value of the Message field or the default value if not set.
 * @return {string} The value.
 */
proto2.SignedServerMessage.prototype.getMessageOrDefault = function() {
  return /** @type {string} */ (this.get$ValueOrDefault(1));
};


/**
 * Sets the value of the Message field.
 * @param {string} value The value.
 */
proto2.SignedServerMessage.prototype.setMessage = function(value) {
  this.set$Value(1, value);
};


/**
 * @return {boolean} Whether the Message field has a value.
 */
proto2.SignedServerMessage.prototype.hasMessage = function() {
  return this.has$Value(1);
};


/**
 * @return {number} The number of values in the Message field.
 */
proto2.SignedServerMessage.prototype.messageCount = function() {
  return this.count$Values(1);
};


/**
 * Clears the values in the Message field.
 */
proto2.SignedServerMessage.prototype.clearMessage = function() {
  this.clear$Field(1);
};


/**
 * Gets the value of the Signature field.
 * @return {?string} The value.
 */
proto2.SignedServerMessage.prototype.getSignature = function() {
  return /** @type {?string} */ (this.get$Value(2));
};


/**
 * Gets the value of the Signature field or the default value if not set.
 * @return {string} The value.
 */
proto2.SignedServerMessage.prototype.getSignatureOrDefault = function() {
  return /** @type {string} */ (this.get$ValueOrDefault(2));
};


/**
 * Sets the value of the Signature field.
 * @param {string} value The value.
 */
proto2.SignedServerMessage.prototype.setSignature = function(value) {
  this.set$Value(2, value);
};


/**
 * @return {boolean} Whether the Signature field has a value.
 */
proto2.SignedServerMessage.prototype.hasSignature = function() {
  return this.has$Value(2);
};


/**
 * @return {number} The number of values in the Signature field.
 */
proto2.SignedServerMessage.prototype.signatureCount = function() {
  return this.count$Values(2);
};


/**
 * Clears the values in the Signature field.
 */
proto2.SignedServerMessage.prototype.clearSignature = function() {
  this.clear$Field(2);
};

/**
 * Message ServerMessage.
 * @constructor
 * @extends {goog.proto2.Message}
 */
proto2.SignedServerMessage.ServerMessage = function() {
  goog.proto2.Message.apply(this);
};
goog.inherits(proto2.SignedServerMessage.ServerMessage, goog.proto2.Message);


/**
 * Overrides {@link goog.proto2.Message#clone} to specify its exact return type.
 * @return {!proto2.SignedServerMessage.ServerMessage} The cloned message.
 * @override
 */
proto2.SignedServerMessage.ServerMessage.prototype.clone;


/**
 * Gets the value of the HashOfOperations field.
 * @return {?string} The value.
 */
proto2.SignedServerMessage.ServerMessage.prototype.getHashOfOperations = function() {
  return /** @type {?string} */ (this.get$Value(1));
};


/**
 * Gets the value of the HashOfOperations field or the default value if not set.
 * @return {string} The value.
 */
proto2.SignedServerMessage.ServerMessage.prototype.getHashOfOperationsOrDefault = function() {
  return /** @type {string} */ (this.get$ValueOrDefault(1));
};


/**
 * Sets the value of the HashOfOperations field.
 * @param {string} value The value.
 */
proto2.SignedServerMessage.ServerMessage.prototype.setHashOfOperations = function(value) {
  this.set$Value(1, value);
};


/**
 * @return {boolean} Whether the HashOfOperations field has a value.
 */
proto2.SignedServerMessage.ServerMessage.prototype.hasHashOfOperations = function() {
  return this.has$Value(1);
};


/**
 * @return {number} The number of values in the HashOfOperations field.
 */
proto2.SignedServerMessage.ServerMessage.prototype.hashOfOperationsCount = function() {
  return this.count$Values(1);
};


/**
 * Clears the values in the HashOfOperations field.
 */
proto2.SignedServerMessage.ServerMessage.prototype.clearHashOfOperations = function() {
  this.clear$Field(1);
};


/**
 * Gets the value of the HashOfHashes field.
 * @return {?string} The value.
 */
proto2.SignedServerMessage.ServerMessage.prototype.getHashOfHashes = function() {
  return /** @type {?string} */ (this.get$Value(2));
};


/**
 * Gets the value of the HashOfHashes field or the default value if not set.
 * @return {string} The value.
 */
proto2.SignedServerMessage.ServerMessage.prototype.getHashOfHashesOrDefault = function() {
  return /** @type {string} */ (this.get$ValueOrDefault(2));
};


/**
 * Sets the value of the HashOfHashes field.
 * @param {string} value The value.
 */
proto2.SignedServerMessage.ServerMessage.prototype.setHashOfHashes = function(value) {
  this.set$Value(2, value);
};


/**
 * @return {boolean} Whether the HashOfHashes field has a value.
 */
proto2.SignedServerMessage.ServerMessage.prototype.hasHashOfHashes = function() {
  return this.has$Value(2);
};


/**
 * @return {number} The number of values in the HashOfHashes field.
 */
proto2.SignedServerMessage.ServerMessage.prototype.hashOfHashesCount = function() {
  return this.count$Values(2);
};


/**
 * Clears the values in the HashOfHashes field.
 */
proto2.SignedServerMessage.ServerMessage.prototype.clearHashOfHashes = function() {
  this.clear$Field(2);
};


/**
 * Gets the value of the Operations field.
 * @return {?string} The value.
 */
proto2.SignedServerMessage.ServerMessage.prototype.getOperations = function() {
  return /** @type {?string} */ (this.get$Value(3));
};


/**
 * Gets the value of the Operations field or the default value if not set.
 * @return {string} The value.
 */
proto2.SignedServerMessage.ServerMessage.prototype.getOperationsOrDefault = function() {
  return /** @type {string} */ (this.get$ValueOrDefault(3));
};


/**
 * Sets the value of the Operations field.
 * @param {string} value The value.
 */
proto2.SignedServerMessage.ServerMessage.prototype.setOperations = function(value) {
  this.set$Value(3, value);
};


/**
 * @return {boolean} Whether the Operations field has a value.
 */
proto2.SignedServerMessage.ServerMessage.prototype.hasOperations = function() {
  return this.has$Value(3);
};


/**
 * @return {number} The number of values in the Operations field.
 */
proto2.SignedServerMessage.ServerMessage.prototype.operationsCount = function() {
  return this.count$Values(3);
};


/**
 * Clears the values in the Operations field.
 */
proto2.SignedServerMessage.ServerMessage.prototype.clearOperations = function() {
  this.clear$Field(3);
};


/**
 * Gets the value of the HashOfState field.
 * @return {?string} The value.
 */
proto2.SignedServerMessage.ServerMessage.prototype.getHashOfState = function() {
  return /** @type {?string} */ (this.get$Value(4));
};


/**
 * Gets the value of the HashOfState field or the default value if not set.
 * @return {string} The value.
 */
proto2.SignedServerMessage.ServerMessage.prototype.getHashOfStateOrDefault = function() {
  return /** @type {string} */ (this.get$ValueOrDefault(4));
};


/**
 * Sets the value of the HashOfState field.
 * @param {string} value The value.
 */
proto2.SignedServerMessage.ServerMessage.prototype.setHashOfState = function(value) {
  this.set$Value(4, value);
};


/**
 * @return {boolean} Whether the HashOfState field has a value.
 */
proto2.SignedServerMessage.ServerMessage.prototype.hasHashOfState = function() {
  return this.has$Value(4);
};


/**
 * @return {number} The number of values in the HashOfState field.
 */
proto2.SignedServerMessage.ServerMessage.prototype.hashOfStateCount = function() {
  return this.count$Values(4);
};


/**
 * Clears the values in the HashOfState field.
 */
proto2.SignedServerMessage.ServerMessage.prototype.clearHashOfState = function() {
  this.clear$Field(4);
};


/**
 * Gets the value of the round field.
 * @return {?string} The value.
 */
proto2.SignedServerMessage.ServerMessage.prototype.getRound = function() {
  return /** @type {?string} */ (this.get$Value(10));
};


/**
 * Gets the value of the round field or the default value if not set.
 * @return {string} The value.
 */
proto2.SignedServerMessage.ServerMessage.prototype.getRoundOrDefault = function() {
  return /** @type {string} */ (this.get$ValueOrDefault(10));
};


/**
 * Sets the value of the round field.
 * @param {string} value The value.
 */
proto2.SignedServerMessage.ServerMessage.prototype.setRound = function(value) {
  this.set$Value(10, value);
};


/**
 * @return {boolean} Whether the round field has a value.
 */
proto2.SignedServerMessage.ServerMessage.prototype.hasRound = function() {
  return this.has$Value(10);
};


/**
 * @return {number} The number of values in the round field.
 */
proto2.SignedServerMessage.ServerMessage.prototype.roundCount = function() {
  return this.count$Values(10);
};


/**
 * Clears the values in the round field.
 */
proto2.SignedServerMessage.ServerMessage.prototype.clearRound = function() {
  this.clear$Field(10);
};


/**
 * Gets the value of the server field.
 * @return {?string} The value.
 */
proto2.SignedServerMessage.ServerMessage.prototype.getServer = function() {
  return /** @type {?string} */ (this.get$Value(11));
};


/**
 * Gets the value of the server field or the default value if not set.
 * @return {string} The value.
 */
proto2.SignedServerMessage.ServerMessage.prototype.getServerOrDefault = function() {
  return /** @type {string} */ (this.get$ValueOrDefault(11));
};


/**
 * Sets the value of the server field.
 * @param {string} value The value.
 */
proto2.SignedServerMessage.ServerMessage.prototype.setServer = function(value) {
  this.set$Value(11, value);
};


/**
 * @return {boolean} Whether the server field has a value.
 */
proto2.SignedServerMessage.ServerMessage.prototype.hasServer = function() {
  return this.has$Value(11);
};


/**
 * @return {number} The number of values in the server field.
 */
proto2.SignedServerMessage.ServerMessage.prototype.serverCount = function() {
  return this.count$Values(11);
};


/**
 * Clears the values in the server field.
 */
proto2.SignedServerMessage.ServerMessage.prototype.clearServer = function() {
  this.clear$Field(11);
};


/**
 * Gets the value of the time field.
 * @return {?string} The value.
 */
proto2.SignedServerMessage.ServerMessage.prototype.getTime = function() {
  return /** @type {?string} */ (this.get$Value(12));
};


/**
 * Gets the value of the time field or the default value if not set.
 * @return {string} The value.
 */
proto2.SignedServerMessage.ServerMessage.prototype.getTimeOrDefault = function() {
  return /** @type {string} */ (this.get$ValueOrDefault(12));
};


/**
 * Sets the value of the time field.
 * @param {string} value The value.
 */
proto2.SignedServerMessage.ServerMessage.prototype.setTime = function(value) {
  this.set$Value(12, value);
};


/**
 * @return {boolean} Whether the time field has a value.
 */
proto2.SignedServerMessage.ServerMessage.prototype.hasTime = function() {
  return this.has$Value(12);
};


/**
 * @return {number} The number of values in the time field.
 */
proto2.SignedServerMessage.ServerMessage.prototype.timeCount = function() {
  return this.count$Values(12);
};


/**
 * Clears the values in the time field.
 */
proto2.SignedServerMessage.ServerMessage.prototype.clearTime = function() {
  this.clear$Field(12);
};

/**
 * Message OperationsT.
 * @constructor
 * @extends {goog.proto2.Message}
 */
proto2.SignedServerMessage.ServerMessage.OperationsT = function() {
  goog.proto2.Message.apply(this);
};
goog.inherits(proto2.SignedServerMessage.ServerMessage.OperationsT, goog.proto2.Message);


/**
 * Overrides {@link goog.proto2.Message#clone} to specify its exact return type.
 * @return {!proto2.SignedServerMessage.ServerMessage.OperationsT} The cloned message.
 * @override
 */
proto2.SignedServerMessage.ServerMessage.OperationsT.prototype.clone;


/**
 * Gets the value of the Seed field.
 * @return {?string} The value.
 */
proto2.SignedServerMessage.ServerMessage.OperationsT.prototype.getSeed = function() {
  return /** @type {?string} */ (this.get$Value(1));
};


/**
 * Gets the value of the Seed field or the default value if not set.
 * @return {string} The value.
 */
proto2.SignedServerMessage.ServerMessage.OperationsT.prototype.getSeedOrDefault = function() {
  return /** @type {string} */ (this.get$ValueOrDefault(1));
};


/**
 * Sets the value of the Seed field.
 * @param {string} value The value.
 */
proto2.SignedServerMessage.ServerMessage.OperationsT.prototype.setSeed = function(value) {
  this.set$Value(1, value);
};


/**
 * @return {boolean} Whether the Seed field has a value.
 */
proto2.SignedServerMessage.ServerMessage.OperationsT.prototype.hasSeed = function() {
  return this.has$Value(1);
};


/**
 * @return {number} The number of values in the Seed field.
 */
proto2.SignedServerMessage.ServerMessage.OperationsT.prototype.seedCount = function() {
  return this.count$Values(1);
};


/**
 * Clears the values in the Seed field.
 */
proto2.SignedServerMessage.ServerMessage.OperationsT.prototype.clearSeed = function() {
  this.clear$Field(1);
};


/**
 * Gets the value of the time field.
 * @return {?string} The value.
 */
proto2.SignedServerMessage.ServerMessage.OperationsT.prototype.getTime = function() {
  return /** @type {?string} */ (this.get$Value(2));
};


/**
 * Gets the value of the time field or the default value if not set.
 * @return {string} The value.
 */
proto2.SignedServerMessage.ServerMessage.OperationsT.prototype.getTimeOrDefault = function() {
  return /** @type {string} */ (this.get$ValueOrDefault(2));
};


/**
 * Sets the value of the time field.
 * @param {string} value The value.
 */
proto2.SignedServerMessage.ServerMessage.OperationsT.prototype.setTime = function(value) {
  this.set$Value(2, value);
};


/**
 * @return {boolean} Whether the time field has a value.
 */
proto2.SignedServerMessage.ServerMessage.OperationsT.prototype.hasTime = function() {
  return this.has$Value(2);
};


/**
 * @return {number} The number of values in the time field.
 */
proto2.SignedServerMessage.ServerMessage.OperationsT.prototype.timeCount = function() {
  return this.count$Values(2);
};


/**
 * Clears the values in the time field.
 */
proto2.SignedServerMessage.ServerMessage.OperationsT.prototype.clearTime = function() {
  this.clear$Field(2);
};


/**
 * Gets the value of the ProfileOperations field at the index given.
 * @param {number} index The index to lookup.
 * @return {proto2.SignedProfileOperation} The value.
 */
proto2.SignedServerMessage.ServerMessage.OperationsT.prototype.getProfileOperations = function(index) {
  return /** @type {proto2.SignedProfileOperation} */ (this.get$Value(3, index));
};


/**
 * Gets the value of the ProfileOperations field at the index given or the default value if not set.
 * @param {number} index The index to lookup.
 * @return {!proto2.SignedProfileOperation} The value.
 */
proto2.SignedServerMessage.ServerMessage.OperationsT.prototype.getProfileOperationsOrDefault = function(index) {
  return /** @type {!proto2.SignedProfileOperation} */ (this.get$ValueOrDefault(3, index));
};


/**
 * Adds a value to the ProfileOperations field.
 * @param {!proto2.SignedProfileOperation} value The value to add.
 */
proto2.SignedServerMessage.ServerMessage.OperationsT.prototype.addProfileOperations = function(value) {
  this.add$Value(3, value);
};


/**
 * Returns the array of values in the ProfileOperations field.
 * @return {!Array.<!proto2.SignedProfileOperation>} The values in the field.
 */
proto2.SignedServerMessage.ServerMessage.OperationsT.prototype.profileOperationsArray = function() {
  return /** @type {!Array.<!proto2.SignedProfileOperation>} */ (this.array$Values(3));
};


/**
 * @return {boolean} Whether the ProfileOperations field has a value.
 */
proto2.SignedServerMessage.ServerMessage.OperationsT.prototype.hasProfileOperations = function() {
  return this.has$Value(3);
};


/**
 * @return {number} The number of values in the ProfileOperations field.
 */
proto2.SignedServerMessage.ServerMessage.OperationsT.prototype.profileOperationsCount = function() {
  return this.count$Values(3);
};


/**
 * Clears the values in the ProfileOperations field.
 */
proto2.SignedServerMessage.ServerMessage.OperationsT.prototype.clearProfileOperations = function() {
  this.clear$Field(3);
};





/**
 * Message ClientReply.
 * @constructor
 * @extends {goog.proto2.Message}
 */
proto2.ClientReply = function() {
  goog.proto2.Message.apply(this);
};
goog.inherits(proto2.ClientReply, goog.proto2.Message);


/**
 * Overrides {@link goog.proto2.Message#clone} to specify its exact return type.
 * @return {!proto2.ClientReply} The cloned message.
 * @override
 */
proto2.ClientReply.prototype.clone;


/**
 * Gets the value of the StateConfirmations field at the index given.
 * @param {number} index The index to lookup.
 * @return {proto2.SignedServerMessage} The value.
 */
proto2.ClientReply.prototype.getStateConfirmations = function(index) {
  return /** @type {proto2.SignedServerMessage} */ (this.get$Value(1, index));
};


/**
 * Gets the value of the StateConfirmations field at the index given or the default value if not set.
 * @param {number} index The index to lookup.
 * @return {!proto2.SignedServerMessage} The value.
 */
proto2.ClientReply.prototype.getStateConfirmationsOrDefault = function(index) {
  return /** @type {!proto2.SignedServerMessage} */ (this.get$ValueOrDefault(1, index));
};


/**
 * Adds a value to the StateConfirmations field.
 * @param {!proto2.SignedServerMessage} value The value to add.
 */
proto2.ClientReply.prototype.addStateConfirmations = function(value) {
  this.add$Value(1, value);
};


/**
 * Returns the array of values in the StateConfirmations field.
 * @return {!Array.<!proto2.SignedServerMessage>} The values in the field.
 */
proto2.ClientReply.prototype.stateConfirmationsArray = function() {
  return /** @type {!Array.<!proto2.SignedServerMessage>} */ (this.array$Values(1));
};


/**
 * @return {boolean} Whether the StateConfirmations field has a value.
 */
proto2.ClientReply.prototype.hasStateConfirmations = function() {
  return this.has$Value(1);
};


/**
 * @return {number} The number of values in the StateConfirmations field.
 */
proto2.ClientReply.prototype.stateConfirmationsCount = function() {
  return this.count$Values(1);
};


/**
 * Clears the values in the StateConfirmations field.
 */
proto2.ClientReply.prototype.clearStateConfirmations = function() {
  this.clear$Field(1);
};


/**
 * Gets the value of the LookupNodes field at the index given.
 * @param {number} index The index to lookup.
 * @return {proto2.ClientReply.MerklemapNode} The value.
 */
proto2.ClientReply.prototype.getLookupNodes = function(index) {
  return /** @type {proto2.ClientReply.MerklemapNode} */ (this.get$Value(2, index));
};


/**
 * Gets the value of the LookupNodes field at the index given or the default value if not set.
 * @param {number} index The index to lookup.
 * @return {!proto2.ClientReply.MerklemapNode} The value.
 */
proto2.ClientReply.prototype.getLookupNodesOrDefault = function(index) {
  return /** @type {!proto2.ClientReply.MerklemapNode} */ (this.get$ValueOrDefault(2, index));
};


/**
 * Adds a value to the LookupNodes field.
 * @param {!proto2.ClientReply.MerklemapNode} value The value to add.
 */
proto2.ClientReply.prototype.addLookupNodes = function(value) {
  this.add$Value(2, value);
};


/**
 * Returns the array of values in the LookupNodes field.
 * @return {!Array.<!proto2.ClientReply.MerklemapNode>} The values in the field.
 */
proto2.ClientReply.prototype.lookupNodesArray = function() {
  return /** @type {!Array.<!proto2.ClientReply.MerklemapNode>} */ (this.array$Values(2));
};


/**
 * @return {boolean} Whether the LookupNodes field has a value.
 */
proto2.ClientReply.prototype.hasLookupNodes = function() {
  return this.has$Value(2);
};


/**
 * @return {number} The number of values in the LookupNodes field.
 */
proto2.ClientReply.prototype.lookupNodesCount = function() {
  return this.count$Values(2);
};


/**
 * Clears the values in the LookupNodes field.
 */
proto2.ClientReply.prototype.clearLookupNodes = function() {
  this.clear$Field(2);
};


/**
 * Gets the value of the status field.
 * @return {?proto2.ClientReply.Status} The value.
 */
proto2.ClientReply.prototype.getStatus = function() {
  return /** @type {?proto2.ClientReply.Status} */ (this.get$Value(3));
};


/**
 * Gets the value of the status field or the default value if not set.
 * @return {proto2.ClientReply.Status} The value.
 */
proto2.ClientReply.prototype.getStatusOrDefault = function() {
  return /** @type {proto2.ClientReply.Status} */ (this.get$ValueOrDefault(3));
};


/**
 * Sets the value of the status field.
 * @param {proto2.ClientReply.Status} value The value.
 */
proto2.ClientReply.prototype.setStatus = function(value) {
  this.set$Value(3, value);
};


/**
 * @return {boolean} Whether the status field has a value.
 */
proto2.ClientReply.prototype.hasStatus = function() {
  return this.has$Value(3);
};


/**
 * @return {number} The number of values in the status field.
 */
proto2.ClientReply.prototype.statusCount = function() {
  return this.count$Values(3);
};


/**
 * Clears the values in the status field.
 */
proto2.ClientReply.prototype.clearStatus = function() {
  this.clear$Field(3);
};


/**
 * Enumeration Status.
 * @enum {number}
 */
proto2.ClientReply.Status = {
  OK: 0,
  REGISTRATION_DISABLED: 1,
  INVITE_INVALID: 2,
  INVITE_USED: 3,
  NOT_AUTHORIZED: 4,
  NOT_A_LEADER: 5,
  TRY_AGAIN: 6
};



/**
 * Message MerklemapNode.
 * @constructor
 * @extends {goog.proto2.Message}
 */
proto2.ClientReply.MerklemapNode = function() {
  goog.proto2.Message.apply(this);
};
goog.inherits(proto2.ClientReply.MerklemapNode, goog.proto2.Message);


/**
 * Overrides {@link goog.proto2.Message#clone} to specify its exact return type.
 * @return {!proto2.ClientReply.MerklemapNode} The cloned message.
 * @override
 */
proto2.ClientReply.MerklemapNode.prototype.clone;


/**
 * Gets the value of the SubstringBitsInLastByte field.
 * @return {?string} The value.
 */
proto2.ClientReply.MerklemapNode.prototype.getSubstringBitsInLastByte = function() {
  return /** @type {?string} */ (this.get$Value(1));
};


/**
 * Gets the value of the SubstringBitsInLastByte field or the default value if not set.
 * @return {string} The value.
 */
proto2.ClientReply.MerklemapNode.prototype.getSubstringBitsInLastByteOrDefault = function() {
  return /** @type {string} */ (this.get$ValueOrDefault(1));
};


/**
 * Sets the value of the SubstringBitsInLastByte field.
 * @param {string} value The value.
 */
proto2.ClientReply.MerklemapNode.prototype.setSubstringBitsInLastByte = function(value) {
  this.set$Value(1, value);
};


/**
 * @return {boolean} Whether the SubstringBitsInLastByte field has a value.
 */
proto2.ClientReply.MerklemapNode.prototype.hasSubstringBitsInLastByte = function() {
  return this.has$Value(1);
};


/**
 * @return {number} The number of values in the SubstringBitsInLastByte field.
 */
proto2.ClientReply.MerklemapNode.prototype.substringBitsInLastByteCount = function() {
  return this.count$Values(1);
};


/**
 * Clears the values in the SubstringBitsInLastByte field.
 */
proto2.ClientReply.MerklemapNode.prototype.clearSubstringBitsInLastByte = function() {
  this.clear$Field(1);
};


/**
 * Gets the value of the Substring field.
 * @return {?string} The value.
 */
proto2.ClientReply.MerklemapNode.prototype.getSubstring = function() {
  return /** @type {?string} */ (this.get$Value(2));
};


/**
 * Gets the value of the Substring field or the default value if not set.
 * @return {string} The value.
 */
proto2.ClientReply.MerklemapNode.prototype.getSubstringOrDefault = function() {
  return /** @type {string} */ (this.get$ValueOrDefault(2));
};


/**
 * Sets the value of the Substring field.
 * @param {string} value The value.
 */
proto2.ClientReply.MerklemapNode.prototype.setSubstring = function(value) {
  this.set$Value(2, value);
};


/**
 * @return {boolean} Whether the Substring field has a value.
 */
proto2.ClientReply.MerklemapNode.prototype.hasSubstring = function() {
  return this.has$Value(2);
};


/**
 * @return {number} The number of values in the Substring field.
 */
proto2.ClientReply.MerklemapNode.prototype.substringCount = function() {
  return this.count$Values(2);
};


/**
 * Clears the values in the Substring field.
 */
proto2.ClientReply.MerklemapNode.prototype.clearSubstring = function() {
  this.clear$Field(2);
};


/**
 * Gets the value of the LeftChildHash field.
 * @return {?string} The value.
 */
proto2.ClientReply.MerklemapNode.prototype.getLeftChildHash = function() {
  return /** @type {?string} */ (this.get$Value(3));
};


/**
 * Gets the value of the LeftChildHash field or the default value if not set.
 * @return {string} The value.
 */
proto2.ClientReply.MerklemapNode.prototype.getLeftChildHashOrDefault = function() {
  return /** @type {string} */ (this.get$ValueOrDefault(3));
};


/**
 * Sets the value of the LeftChildHash field.
 * @param {string} value The value.
 */
proto2.ClientReply.MerklemapNode.prototype.setLeftChildHash = function(value) {
  this.set$Value(3, value);
};


/**
 * @return {boolean} Whether the LeftChildHash field has a value.
 */
proto2.ClientReply.MerklemapNode.prototype.hasLeftChildHash = function() {
  return this.has$Value(3);
};


/**
 * @return {number} The number of values in the LeftChildHash field.
 */
proto2.ClientReply.MerklemapNode.prototype.leftChildHashCount = function() {
  return this.count$Values(3);
};


/**
 * Clears the values in the LeftChildHash field.
 */
proto2.ClientReply.MerklemapNode.prototype.clearLeftChildHash = function() {
  this.clear$Field(3);
};


/**
 * Gets the value of the RightChildHash field.
 * @return {?string} The value.
 */
proto2.ClientReply.MerklemapNode.prototype.getRightChildHash = function() {
  return /** @type {?string} */ (this.get$Value(4));
};


/**
 * Gets the value of the RightChildHash field or the default value if not set.
 * @return {string} The value.
 */
proto2.ClientReply.MerklemapNode.prototype.getRightChildHashOrDefault = function() {
  return /** @type {string} */ (this.get$ValueOrDefault(4));
};


/**
 * Sets the value of the RightChildHash field.
 * @param {string} value The value.
 */
proto2.ClientReply.MerklemapNode.prototype.setRightChildHash = function(value) {
  this.set$Value(4, value);
};


/**
 * @return {boolean} Whether the RightChildHash field has a value.
 */
proto2.ClientReply.MerklemapNode.prototype.hasRightChildHash = function() {
  return this.has$Value(4);
};


/**
 * @return {number} The number of values in the RightChildHash field.
 */
proto2.ClientReply.MerklemapNode.prototype.rightChildHashCount = function() {
  return this.count$Values(4);
};


/**
 * Clears the values in the RightChildHash field.
 */
proto2.ClientReply.MerklemapNode.prototype.clearRightChildHash = function() {
  this.clear$Field(4);
};


/**
 * Gets the value of the Value field.
 * @return {?string} The value.
 */
proto2.ClientReply.MerklemapNode.prototype.getValue = function() {
  return /** @type {?string} */ (this.get$Value(5));
};


/**
 * Gets the value of the Value field or the default value if not set.
 * @return {string} The value.
 */
proto2.ClientReply.MerklemapNode.prototype.getValueOrDefault = function() {
  return /** @type {string} */ (this.get$ValueOrDefault(5));
};


/**
 * Sets the value of the Value field.
 * @param {string} value The value.
 */
proto2.ClientReply.MerklemapNode.prototype.setValue = function(value) {
  this.set$Value(5, value);
};


/**
 * @return {boolean} Whether the Value field has a value.
 */
proto2.ClientReply.MerklemapNode.prototype.hasValue = function() {
  return this.has$Value(5);
};


/**
 * @return {number} The number of values in the Value field.
 */
proto2.ClientReply.MerklemapNode.prototype.valueCount = function() {
  return this.count$Values(5);
};


/**
 * Clears the values in the Value field.
 */
proto2.ClientReply.MerklemapNode.prototype.clearValue = function() {
  this.clear$Field(5);
};





goog.proto2.Message.set$Metadata(proto2.Profile, {
  0: {
    name: 'Profile',
    fullName: 'Profile'
  },
  1: {
    name: 'SignatureKey',
    fieldType: goog.proto2.Message.FieldType.MESSAGE,
    type: proto2.Profile.PublicKey
  },
  2: {
    name: 'ExpirationTime',
    fieldType: goog.proto2.Message.FieldType.UINT64,
    type: String
  },
  3: {
    name: 'Version',
    fieldType: goog.proto2.Message.FieldType.UINT64,
    defaultValue: '0',
    type: String
  }
});


goog.proto2.Message.set$Metadata(proto2.Profile.PublicKey, {
  0: {
    name: 'PublicKey',
    containingType: proto2.Profile,
    fullName: 'Profile.PublicKey'
  },
  1: {
    name: 'ed25519',
    fieldType: goog.proto2.Message.FieldType.BYTES,
    type: String
  }
});


goog.proto2.Message.set$Metadata(proto2.SignedProfileOperation, {
  0: {
    name: 'SignedProfileOperation',
    fullName: 'SignedProfileOperation'
  },
  1: {
    name: 'ProfileOperation',
    fieldType: goog.proto2.Message.FieldType.BYTES,
    type: String
  },
  2: {
    name: 'NewProfileSignature',
    fieldType: goog.proto2.Message.FieldType.BYTES,
    type: String
  },
  3: {
    name: 'OldProfileSignature',
    fieldType: goog.proto2.Message.FieldType.BYTES,
    type: String
  }
});


goog.proto2.Message.set$Metadata(proto2.SignedProfileOperation.ProfileOperationT, {
  0: {
    name: 'ProfileOperationT',
    containingType: proto2.SignedProfileOperation,
    fullName: 'SignedProfileOperation.ProfileOperationT'
  },
  1: {
    name: 'Name',
    fieldType: goog.proto2.Message.FieldType.BYTES,
    type: String
  },
  2: {
    name: 'NewProfile',
    fieldType: goog.proto2.Message.FieldType.BYTES,
    type: String
  }
});


goog.proto2.Message.set$Metadata(proto2.SignedServerMessage, {
  0: {
    name: 'SignedServerMessage',
    fullName: 'SignedServerMessage'
  },
  1: {
    name: 'Message',
    fieldType: goog.proto2.Message.FieldType.BYTES,
    type: String
  },
  2: {
    name: 'Signature',
    fieldType: goog.proto2.Message.FieldType.BYTES,
    type: String
  }
});


goog.proto2.Message.set$Metadata(proto2.SignedServerMessage.ServerMessage, {
  0: {
    name: 'ServerMessage',
    containingType: proto2.SignedServerMessage,
    fullName: 'SignedServerMessage.ServerMessage'
  },
  1: {
    name: 'HashOfOperations',
    fieldType: goog.proto2.Message.FieldType.BYTES,
    type: String
  },
  2: {
    name: 'HashOfHashes',
    fieldType: goog.proto2.Message.FieldType.BYTES,
    type: String
  },
  3: {
    name: 'Operations',
    fieldType: goog.proto2.Message.FieldType.BYTES,
    type: String
  },
  4: {
    name: 'HashOfState',
    fieldType: goog.proto2.Message.FieldType.BYTES,
    type: String
  },
  10: {
    name: 'round',
    fieldType: goog.proto2.Message.FieldType.UINT64,
    type: String
  },
  11: {
    name: 'server',
    fieldType: goog.proto2.Message.FieldType.UINT64,
    type: String
  },
  12: {
    name: 'time',
    fieldType: goog.proto2.Message.FieldType.UINT64,
    type: String
  }
});


goog.proto2.Message.set$Metadata(proto2.SignedServerMessage.ServerMessage.OperationsT, {
  0: {
    name: 'OperationsT',
    containingType: proto2.SignedServerMessage.ServerMessage,
    fullName: 'SignedServerMessage.ServerMessage.OperationsT'
  },
  1: {
    name: 'Seed',
    fieldType: goog.proto2.Message.FieldType.BYTES,
    type: String
  },
  2: {
    name: 'time',
    fieldType: goog.proto2.Message.FieldType.UINT64,
    type: String
  },
  3: {
    name: 'ProfileOperations',
    repeated: true,
    fieldType: goog.proto2.Message.FieldType.MESSAGE,
    type: proto2.SignedProfileOperation
  }
});


goog.proto2.Message.set$Metadata(proto2.ClientReply, {
  0: {
    name: 'ClientReply',
    fullName: 'ClientReply'
  },
  1: {
    name: 'StateConfirmations',
    repeated: true,
    fieldType: goog.proto2.Message.FieldType.MESSAGE,
    type: proto2.SignedServerMessage
  },
  2: {
    name: 'LookupNodes',
    repeated: true,
    fieldType: goog.proto2.Message.FieldType.MESSAGE,
    type: proto2.ClientReply.MerklemapNode
  },
  3: {
    name: 'status',
    fieldType: goog.proto2.Message.FieldType.ENUM,
    defaultValue: proto2.ClientReply.Status.OK,
    type: proto2.ClientReply.Status
  }
});


goog.proto2.Message.set$Metadata(proto2.ClientReply.MerklemapNode, {
  0: {
    name: 'MerklemapNode',
    containingType: proto2.ClientReply,
    fullName: 'ClientReply.MerklemapNode'
  },
  1: {
    name: 'SubstringBitsInLastByte',
    fieldType: goog.proto2.Message.FieldType.UINT64,
    type: String
  },
  2: {
    name: 'Substring',
    fieldType: goog.proto2.Message.FieldType.BYTES,
    type: String
  },
  3: {
    name: 'LeftChildHash',
    fieldType: goog.proto2.Message.FieldType.BYTES,
    type: String
  },
  4: {
    name: 'RightChildHash',
    fieldType: goog.proto2.Message.FieldType.BYTES,
    type: String
  },
  5: {
    name: 'Value',
    fieldType: goog.proto2.Message.FieldType.BYTES,
    type: String
  }
});
